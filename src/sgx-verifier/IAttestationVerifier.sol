// SPDX-License-Identifier: MIT

pragma solidity ^0.8.24;

interface IAttestationVerifier {
    /**********
     * Events *
     **********/

    /// @notice Emitted when the `mrSigner` status is updated.
    /// @param mrSigner The value of mrSigner.
    /// @param status The new status of the signer.
    event UpdateMrSigner(bytes32 indexed mrSigner, bool status);

    /// @notice Emitted when the `mrEnclave` status is updated.
    /// @param mrEnclave The value of mrEnclave.
    /// @param status The new status of the enclave.
    event UpdateMrEnclave(bytes32 indexed mrEnclave, bool status);

    /*************************
     * Public View Functions *
     *************************/

    /// @notice Return whether the signer is trusted.
    /// @param mrSigner The value of signer to check.
    function isTrustedMrSigner(bytes32 mrSigner) external view returns (bool);

    /// @notice Return whether the enclave is trusted.
    /// @param mrEnclave The value of enclave to check.
    function isTrustedMrEnclave(bytes32 mrEnclave) external view returns (bool);

    /// @notice Return the list of trusted signers.
    function getTrustedMrSigners() external view returns (bytes32[] memory signers);

    /// @notice Return the list of trusted enclaves.
    function getTrustedMrEnclaves() external view returns (bytes32[] memory enclaves);

    /// @notice Verify attestation report.
    ///
    /// @dev This function should revert when the attestation report is invalid.
    ///
    /// @param report The attestation report generated by enclave.
    /// @param userData The user data attached with the attestation report.
    function verifyAttestation(bytes calldata report, bytes32 userData) external view;
}
